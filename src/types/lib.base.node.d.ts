import { AutoMargin, InitialData, VisibleStyle } from './lib.base.types.node';

declare global {
    namespace androme.lib.base {
        export interface Node extends Container<Node>, BoxModel {
            id: number;
            style: CSSStyleDeclaration;
            styleMap: StringMap;
            containerType: number;
            alignmentType: number;
            depth: number;
            siblingIndex: number;
            renderIndex: number;
            renderPosition: number;
            renderExtension: Set<Extension<Node>>;
            documentRoot: boolean;
            positioned: boolean;
            visible: boolean;
            excluded: boolean;
            rendered: boolean;
            controlId: string;
            companion: Node | undefined;
            readonly localSettings: EnvironmentSettings;
            readonly excludeSection: number;
            readonly excludeProcedure: number;
            readonly excludeResource: number;
            readonly initial: InitialData<Node>;
            readonly renderChildren: Node[];
            readonly documentParent: Node;
            readonly box: BoxDimensions;
            readonly bounds: BoxDimensions;
            readonly linear: BoxDimensions;
            readonly inlineWidth: boolean;
            readonly inlineHeight: boolean;
            readonly blockWidth: boolean;
            readonly blockHeight: boolean;
            readonly htmlElement: boolean;
            readonly styleElement: boolean;
            readonly domElement: boolean;
            readonly imageElement: boolean;
            readonly svgElement: boolean;
            readonly flexElement: boolean;
            readonly gridElement: boolean;
            readonly textElement: boolean;
            readonly tableElement: boolean;
            readonly groupElement: boolean;
            readonly documentBody: boolean;
            readonly dataset: DOMStringMap;
            readonly extension: string;
            readonly flexbox: Flexbox;
            readonly rightAligned: boolean;
            readonly bottomAligned: boolean;
            readonly viewWidth: number;
            readonly viewHeight: number;
            readonly hasWidth: boolean;
            readonly hasHeight: boolean;
            readonly lineHeight: number;
            readonly display: string;
            readonly position: string;
            readonly positionStatic: boolean;
            readonly positionRelative: boolean;
            readonly top: number | null;
            readonly right: number | null;
            readonly bottom: number | null;
            readonly left: number | null;
            readonly marginTop: number;
            readonly marginRight: number;
            readonly marginBottom: number;
            readonly marginLeft: number;
            readonly borderTopWidth: number;
            readonly borderRightWidth: number;
            readonly borderBottomWidth: number;
            readonly borderLeftWidth: number;
            readonly paddingTop: number;
            readonly paddingRight: number;
            readonly paddingBottom: number;
            readonly paddingLeft: number;
            readonly siblingflow: boolean;
            readonly inlineflow: boolean;
            readonly inline: boolean;
            readonly inlineStatic: boolean;
            readonly inlineVertical: boolean;
            readonly inlineText: boolean;
            readonly plainText: boolean;
            readonly lineBreak: boolean;
            readonly block: boolean;
            readonly blockStatic: boolean;
            readonly blockDimension: boolean;
            readonly alignOrigin: boolean;
            readonly autoMargin: AutoMargin;
            readonly pageflow: boolean;
            readonly floating: boolean;
            readonly float: string;
            readonly visibleStyle: VisibleStyle;
            readonly textContent: string;
            readonly fontSize: number;
            readonly overflowX: boolean;
            readonly overflowY: boolean;
            readonly baseline: boolean;
            readonly verticalAlign: string;
            readonly supSubscript: boolean;
            readonly preserveWhiteSpace: boolean;
            readonly layoutHorizontal: boolean;
            readonly layoutVertical: boolean;
            readonly layoutFrame: boolean;
            readonly layoutLinear: boolean;
            readonly layoutRelative: boolean;
            readonly layoutConstraint: boolean;
            readonly linearVertical: boolean;
            readonly actualParent: Node | null;
            readonly actualChildren: Node[];
            readonly actualHeight: number;
            readonly dir: string;
            readonly nodes: Node[];
            readonly firstChild: Node | null;
            readonly singleChild: boolean;
            readonly previousElementSibling: Element | null;
            readonly nextElementSibling: Element | null;
            readonly center: Point;
            parent: Node;
            renderParent: Node;
            element: Element;
            tagName: string;
            controlName: string;
            renderAs: Node | undefined;
            renderDepth: number;
            multiLine: boolean;
            overflow: number;
            setControlType(controlName: string, containerType?: number): void;
            setLayout(): void;
            setAlignment(settings: UserSettings): void;
            applyOptimizations(settings: UserSettings): void;
            applyCustomizations(settings: UserSettings): void;
            modifyBox(region: number | string, offset: number | null, negative?: boolean): void;
            valueBox(region: number): [number, number];
            localizeString(value: string): string;
            clone(id?: number, children?: boolean): Node;
            init(): void;
            is(...containers: number[]): boolean;
            of(containerType: number, ...alignmentType: number[]): boolean;
            unsafe(obj: string): any;
            attr(obj: string, attr: string, value?: string, overwrite?: boolean): string;
            namespace(obj: string): StringMap;
            delete(obj: string, ...attrs: string[]): void;
            apply(options: {}): void;
            each(predicate: IteratorPredicate<Node, void>, rendered?: boolean): this;
            render(parent: Node): void;
            hide(): void;
            data(obj: string, attr: string, value?: any, overwrite?: boolean): any;
            unsetCache(attr?: string): void;
            ascend(generated?: boolean, levels?: number): Node[];
            cascade(): Node[];
            inherit(node: Node, ...props: string[]): void;
            alignedVertically(previous: Node | null, siblings?: Node[], cleared?: Map<Node, string>): boolean;
            intersectX(rect: BoxDimensions, dimension?: string): boolean;
            intersectY(rect: BoxDimensions, dimension?: string): boolean;
            withinX(rect: BoxDimensions, dimension?: string): boolean;
            withinY(rect: BoxDimensions, dimension?: string): boolean;
            inside(rect: BoxDimensions, dimension?: string): boolean;
            outsideX(rect: BoxDimensions, dimension?: string): boolean;
            outsideY(rect: BoxDimensions, dimension?: string): boolean;
            css(attr: object | string, value?: string, cache?: boolean): string;
            cssInitial(attr: string, complete?: boolean): string;
            cssParent(attr: string, startChild?: boolean, ignoreHidden?: boolean): string;
            cssTry(attr: string, value: string): boolean;
            cssFinally(attr: string): boolean;
            toInt(attr: string, initial?: boolean, defaultValue?: number): number;
            convertPX(value: string): string;
            convertPercent(value: string, horizontal: boolean, parentBounds?: boolean): string;
            has(attr: string, checkType?: number, options?: {}): boolean;
            hasBit(attr: string, value: number): boolean;
            hasAlign(value: number): boolean;
            exclude(options: { section?: number, procedure?: number, resource?: number }): void;
            setExclusions(): void;
            setBounds(calibrate?: boolean): void;
            replaceNode(node: Node, withNode: Node, append?: boolean): void;
            renderChild(node: Node, append?: boolean): void;
            resetBox(region: number, node?: Node, fromParent?: boolean): void;
            inheritBox(region: number, node: Node): void;
            actualLeft(dimension?: string): number;
            actualRight(dimension?: string): number;
            getParentElementAsNode(negative?: boolean): Node | null;
            previousSibling(pageflow?: boolean, lineBreak?: boolean, excluded?: boolean): Node | null;
            nextSibling(pageflow?: boolean, lineBreak?: boolean, excluded?: boolean): Node | null;
        }

        export class Node implements Node {
            public static getContentBoxWidth<T extends Node>(node: T): number;
            public static getContentBoxHeight<T extends Node>(node: T): number;
            public static getElementAsNode<T>(element: UndefNull<Element>): T | null;
        }

        export class NodeGroup extends Node {
            public static outerRegion<T>(list: T[], dimension?: string): ObjectMap<T>;
        }
    }
}

export {};